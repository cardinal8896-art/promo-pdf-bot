import os
import asyncio
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiohttp import web

import pandas as pd

from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.pdfmetrics import stringWidth
from reportlab.lib.colors import black

from PyPDF2 import PdfReader, PdfWriter




# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –®—Ä–∏—Ñ—Ç: –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Helvetica-Bold, –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º TTF.
FONT_NAME = "Helvetica-Bold"
FONT_TTF  = None  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "fonts/DejaVuSans-Bold.ttf"
TEXT_COLOR = black

# –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–¥ —Å–ª–æ–≤–æ–º PROMOCODE (–≤ –¥–æ–ª—è—Ö —à–∏—Ä–∏–Ω—ã/–≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
BOX = dict(
    x=0.10,   # —à–∏—Ä–∏–Ω—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    y=0.150,  # –±—ã–ª–æ 0.37 ‚Üí –æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∏–∂–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë –Ω–∏–∂–µ ‚Äî —É–º–µ–Ω—å—à–∞–π—Ç–µ)
    w=0.80,
    h=0.050   # –±—ã–ª–æ 0.13 ‚Üí –¥–µ–ª–∞–µ–º –Ω–∏–∂–µ –±–æ–∫—Å, –∑–Ω–∞—á–∏—Ç –∏ —à—Ä–∏—Ñ—Ç —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ
)

# –ü–∞–º—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ Template –∏ Codes
USER_STATE = {}  # user_id -> {"template": bytes, "codes": [..]}

# =================================================


# ---------- —Å–µ—Ä–≤–∏—Å: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ -----------
def ensure_font():
    global FONT_NAME
    if FONT_TTF:
        try:
            pdfmetrics.registerFont(TTFont("CustomFont", FONT_TTF))
            FONT_NAME = "CustomFont"
        except Exception as e:
            print(f"[FONT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å TTF ({FONT_TTF}): {e}. –ò—Å–ø–æ–ª—å–∑—É—é Helvetica-Bold.")


# ---------- –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ ------------
def fit_font_size(text, box_w_pt, box_h_pt, font_name):
    lo, hi = 4, 300
    best = lo
    while lo <= hi:
        mid = (lo + hi) // 2
        width = stringWidth(text, font_name, mid)
        if width <= box_w_pt and mid <= box_h_pt:
            best = mid
            lo = mid + 1
        else:
            hi = mid - 1
    return best


# ---------- —Ä–∏—Å—É–µ–º –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É-–æ–≤–µ—Ä–ª–µ–π ---------
def make_overlay(page_w, page_h, code_text):
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=(page_w, page_h))
    c.setFillColor(TEXT_COLOR)
    c.setStrokeColor(TEXT_COLOR)

    # –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –ø—É–Ω–∫—Ç–∞—Ö
    box_x = BOX["x"] * page_w
    box_y = BOX["y"] * page_h
    box_w = BOX["w"] * page_w
    box_h = BOX["h"] * page_h

    font_size = fit_font_size(code_text, box_w, box_h, FONT_NAME)
    c.setFont(FONT_NAME, font_size)

    text_w = stringWidth(code_text, FONT_NAME, font_size)
    x = box_x + (box_w - text_w) / 2.0
    y = box_y + (box_h - font_size) / 2.0

    c.drawString(x, y, code_text)
    c.showPage()
    c.save()
    buf.seek(0)
    return PdfReader(buf).pages[0]


# ---------- —Å–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ PDF ------------------
 def build_pdf(template_bytes: bytes, codes: list[str]) -> bytes: 
 tpl = PdfReader(BytesIO(template_bytes)) 
 base_page = tpl.pages[0] 
 page_w = float(base_page.mediabox.width) 
 page_h = float(base_page.mediabox.height) 
 
 writer = PdfWriter() 
 for code in codes: 
 # –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤–∞–∂–Ω–æ –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é) 
 page = PdfReader(BytesIO(template_bytes)).pages[0] 
 overlay_page = make_overlay(page_w, page_h, str(code).strip()) 
 page.merge_page(overlay_page) 
 writer.add_page(page) 
 
 out = BytesIO() 
 writer.write(out) 
 out.seek(0) 
 return out.read()

# ---------- —á—Ç–µ–Ω–∏–µ Excel / CSV --------------------
def read_codes_from_bytes(file_name: str, raw: bytes) -> list[str]:
    name = (file_name or "").lower()
    if name.endswith(".csv"):
        df = pd.read_csv(BytesIO(raw), dtype=str)
    else:
        # xlsx/xls/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º –∫–∞–∫ Excel
        df = pd.read_excel(BytesIO(raw), dtype=str)

    # –∏—â–µ–º —Å—Ç–æ–ª–±–µ—Ü code/–∫–æ–¥ –∏–ª–∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π
    cols = [c for c in df.columns]
    col_name = None
    for cand in cols:
        lc = str(cand).strip().lower()
        if lc in {"code", "–∫–æ–¥", "promocode", "promo", "–∫–æ–¥—ã", "codes"}:
            col_name = cand
            break
    if col_name is None:
        # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        col_name = cols[0]

    series = df[col_name].dropna().astype(str).str.strip()
    codes = [s for s in series.tolist() if s]
    # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    uniq = []
    for c in codes:
        if c not in seen:
            seen.add(c)
            uniq.append(c)
    return uniq


# ================== HANDLERS ======================
@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n"
        "1) PDF-—à–∞–±–ª–æ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å PROMOCODE)\n"
        "2) Excel/CSV —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (—Å—Ç–æ–ª–±–µ—Ü code/–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü)\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á—É ‚Äî —Å–æ–±–µ—Ä—É –∏ –≤—ã—à–ª—é –∏—Ç–æ–≥–æ–≤—ã–π PDF."
    )


@dp.message(F.document)
async def on_document(m: Message):
    user_id = m.from_user.id
    doc = m.document
    file_name = doc.file_name or ""

    # —Å–∫–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã
    buf = BytesIO()
    try:
        # aiogram v3 —É–º–µ–µ—Ç —Ç–∞–∫:
        await bot.download(doc, destination=buf)
    except Exception:
        # –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ file_path
        try:
            tg_file = await bot.get_file(doc.file_id)
            await bot.download_file(tg_file.file_path, buf)
        except Exception as e:
            await m.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return
    raw = buf.getvalue()

    state = USER_STATE.setdefault(user_id, {"template": None, "codes": None})

    if (doc.mime_type or "").lower() == "application/pdf" or file_name.lower().endswith(".pdf"):
        state["template"] = raw
        await m.reply("–®–∞–±–ª–æ–Ω PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    elif any(file_name.lower().endswith(ext) for ext in (".xlsx", ".xls", ".csv")):
        try:
            codes = read_codes_from_bytes(file_name, raw)
            if not codes:
                await m.reply("–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ üòï")
                return
            state["codes"] = codes
            await m.reply(f"–§–∞–π–ª —Å –∫–æ–¥–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(codes)}")
        except Exception as e:
            await m.reply(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–¥—ã: {e}")
            return
    else:
        await m.reply("–ú–Ω–µ –Ω—É–∂–µ–Ω PDF (—à–∞–±–ª–æ–Ω) –∏–ª–∏ Excel/CSV (–∫–æ–¥—ã).")
        return

    # –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏–º
    if state.get("template") and state.get("codes"):
        await m.reply("–°–æ–±–∏—Ä–∞—é –∏—Ç–æ–≥–æ–≤—ã–π PDF‚Ä¶ ‚è≥")
        try:
            ensure_font()
            out_bytes = build_pdf(state["template"], state["codes"])
            out = BytesIO(out_bytes)
            out.name = "promo_cards.pdf"
            await m.answer_document(types.BufferedInputFile(out.getvalue(), filename="promo_cards.pdf"))
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—ã–ª —á–∏—Å—Ç—ã–º)
            USER_STATE[user_id] = {"template": None, "codes": None}
        except Exception as e:
            await m.reply(f"–£–ø—Å, –Ω–µ —Å–æ–±—Ä–∞–ª–æ—Å—å: {e}")


# ============ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render Free ==========
async def handle(request):
    return web.Response(text="Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 5000)))
    await site.start()


# ================== ENTRYPOINT ====================
async def main():
    ensure_font()
    await start_web_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
