import os
import asyncio
import logging
import tempfile
from typing import List

import pandas as pd
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile
from aiohttp import web

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont


# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# --------------------------

# ---------- TELEGRAM ----------
TOKEN = os.getenv("TELEGRAM_TOKEN")  # –∏–∑ Render ‚Üí Environment
bot = Bot(token=TOKEN)
dp = Dispatcher()
# ------------------------------


# ---------- /start /help ----------
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–±–µ—Ä—É PDF —Å –ø—Ä–æ–º–æ-–∫–∞—Ä—Ç–∞–º–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Excel (.xlsx) c –∫–æ–ª–æ–Ω–∫–æ–π `code` (–∏–ª–∏ `–∫–æ–¥`). "
        "–ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑—å–º—É –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(text)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "1) –ü—Ä–∏—à–ª–∏ Excel (.xlsx) —Å –∫–æ–¥–∞–º–∏ (–∫–æ–ª–æ–Ω–∫–∞ `code`/`–∫–æ–¥`/–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)\n"
        "2) –Ø –≤–µ—Ä–Ω—É PDF: –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
    )
# ----------------------------------


# ---------- –ì–ï–ù–ï–†–ê–¶–ò–Ø PDF ----------
FONT_PATH = os.path.join(os.path.dirname(__file__), "fonts", "DejaVuSans-Bold.ttf")
FONT_NAME = "DejaVuSansBold"

def ensure_font_registered():
    if FONT_NAME not in pdfmetrics.getRegisteredFontNames():
        pdfmetrics.registerFont(TTFont(FONT_NAME, FONT_PATH))

def build_pdf(codes: List[str], out_path: str):
    """–ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: 1 –∫–æ–¥ = 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ–¥ –ø–æ —Ü–µ–Ω—Ç—Ä—É."""
    ensure_font_registered()
    c = canvas.Canvas(out_path, pagesize=A4)
    w, h = A4
    c.setFont(FONT_NAME, 48)

    for code in codes:
        code_str = str(code).strip()
        if not code_str:
            continue
        c.drawCentredString(w / 2, h / 2, code_str)
        c.showPage()

    c.save()
# -----------------------------------


# ---------- –ü–†–ò–Å–ú EXCEL –§–ê–ô–õ–û–í ----------
def pick_codes_column(df: pd.DataFrame) -> List[str]:
    cols_lower = {col.lower(): col for col in df.columns}
    for candidate in ("code", "–∫–æ–¥"):
        if candidate in cols_lower:
            return df[cols_lower[candidate]].astype(str).fillna("").tolist()
    # –µ—Å–ª–∏ —Å–ø–µ—Ü-–∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç ‚Äî –≤–∑—è—Ç—å –ø–µ—Ä–≤—É—é
    first_col = df.columns[0]
    return df[first_col].astype(str).fillna("").tolist()


@dp.message(F.document)
async def handle_document(message: types.Message):
    doc: types.Document = message.document
    filename = (doc.file_name or "").lower()

    if not filename.endswith(".xlsx"):
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *Excel* —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.xlsx`.", parse_mode="Markdown")
        return

    await message.answer("–§–∞–π–ª –ø–æ–ª—É—á–∏–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶")

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ
    with tempfile.TemporaryDirectory() as tmpdir:
        src_path = os.path.join(tmpdir, "input.xlsx")
        out_pdf = os.path.join(tmpdir, "promo_cards.pdf")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(doc.file_id)
        await bot.download(file, destination=src_path)

        # –ß–∏—Ç–∞–µ–º Excel
        try:
            df = pd.read_excel(src_path, dtype=str)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: %s", e)
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ .xlsx –∏ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
            return

        if df.empty or len(df.columns) == 0:
            await message.answer("–í Excel –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–¥–∞–º–∏.")
            return

        codes = pick_codes_column(df)
        codes = [c for c in codes if str(c).strip()]
        if not codes:
            await message.answer("–ö–æ–¥–æ–≤ –Ω–µ –Ω–∞—à—ë–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–æ–Ω–∫—É `code`/`–∫–æ–¥` –∏–ª–∏ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        try:
            build_pdf(codes, out_pdf)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: %s", e)
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ PDF üòî")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            FSInputFile(out_pdf),
            caption=f"–ì–æ—Ç–æ–≤–æ! –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(codes)} —Å—Ç—Ä–∞–Ω–∏—Ü(—ã) —Å –∫–æ–¥–∞–º–∏.",
        )
# ---------------------------------------


# ---------- –í–ï–ë-–ü–ò–ù–ì –î–õ–Ø RENDER ----------
async def ping_handler(_request: web.Request):
    logger.info("‚úÖ Ping received")
    return web.Response(text="Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", ping_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", "5000")))
    await site.start()
# ----------------------------------------


# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    await start_web_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
# ---------------------------
